//
// probe sync_file_range size in both user space and kernel space.
//
// usage: sudo stap -g sync_prob.stp -x {pid}
//
// guokuankuan@bytedance.com
//

global syncs        // kernel sync
global io_times     // kernel sync io stats
global usyncs       // userspace sync
global uio_times    // userspace sync io stats


probe begin
{
  printf ("start sync probe......\n")
}

// function timestamp:long() { return gettimeofday_us() - start_time }

function get_range_sync_nbytes:string(parms_s:string) 
%{
  int c = '=';
  const char* ptr = strrchr(STAP_ARG_parms_s, c);
  strcpy(STAP_RETVALUE, ptr + 1); 
%}

probe process.function ("RangeSync")
{
  nbytes = get_range_sync_nbytes($$parms$)
  usyncs[pid(), execname(), nbytes] <<< 1
}

probe process.function ("RangeSync").return
{
  uio_times <<< gettimeofday_us() - @entry(gettimeofday_us())
}

probe kernel.function ("ksys_sync_file_range") 
{
  syncs[pid(), execname(), $nbytes] <<< 1
}

probe kernel.function ("ksys_sync_file_range").return
{
  io_times <<< gettimeofday_us() - @entry(gettimeofday_us())
}

probe timer.s(5)
{
  printf("-------------kernel function sync_file_range ----------------\n")
  foreach ([pid,name,bytes] in syncs- limit 10)
    printf("pid = %-10d execname = %-20s bytes = %-10d cnt = %-8d\n", 
            pid, name, bytes, @count(syncs[pid, name, bytes]))
  if(@count(io_times) > 0)
    print(@hist_log(io_times))
    // delete io_times
}

probe timer.s(5)
{
  printf("------------- user function RangeSync ----------------\n")
  foreach ([pid,name,bytes] in usyncs- limit 10)
    printf("pid = %-10d execname = %-20s bytes = %-10s cnt = %-8d\n", 
            pid, name, bytes, @count(usyncs[pid, name, bytes]))
  if(@count(uio_times) > 0)
    print(@hist_log(uio_times))
}
